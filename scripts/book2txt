#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    This file is part of Librarian.
#
#    Copyright Â© 2008,2009,2010 Fundacja Nowoczesna Polska <fundacja@nowoczesnapolska.org.pl>
#    
#    For full list of contributors see AUTHORS file. 
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import os
import optparse

from librarian import text
from librarian import dcparser, ParseError


if __name__ == '__main__':
    # Parse commandline arguments
    usage = """Usage: %prog [options] SOURCE [SOURCE...]
    Convert SOURCE files to TXT format."""

    parser = optparse.OptionParser(usage=usage)

    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=False,
        help='print status messages to stdout')
    parser.add_option('-w', '--wrap', action='store', type='int', dest='wrapping', default=0,
        help='set line wrap column')
    parser.add_option('-i', '--ignore-dublin-core', action='store_false', dest='parse_dublincore', default=True,
        help='don\'t try to parse dublin core metadata')
            
    options, input_filenames = parser.parse_args()
    
    if len(input_filenames) < 1:
        parser.print_help()
        exit(1)

    # Do some real work
    for input_filename in input_filenames:
        if options.verbose:
            print input_filename
        
        output_filename = os.path.splitext(input_filename)[0] + '.txt'
        try:
            text.transform(input_filename, output_filename, parse_dublincore=options.parse_dublincore,
                wrapping=str(options.wrapping))
        except ParseError, e:
            print '%(file)s:%(name)s:%(message)s' % {
                'file': input_filename,
                'name': e.__class__.__name__,
                'message': e.message
            }
        except IOError, e:
            print '%(file)s:%(name)s:%(message)s' % {
                'file': input_filename,
                'name': e.__class__.__name__,
                'message': e.strerror,
            }
        except BaseException, e:
            print '%(file)s:%(etype)s:%(message)s' % {
                'file': input_filename,
                'etype': e.__class__.__name__,
                'message': e.message,
            }
            raise e
